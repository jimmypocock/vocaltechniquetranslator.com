name: Deploy to AWS

on:
  # Disabled automatic deployment - enable via VTT-087 when ready
  # push:
  #   branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Required for OIDC authentication
permissions:
  id-token: write
  contents: read

# Prevent concurrent deployments
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build Next.js app
        run: npm run build
        env:
          NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID }}
          NEXT_PUBLIC_ADSENSE_PUB_ID: ${{ secrets.NEXT_PUBLIC_ADSENSE_PUB_ID }}

      - name: Export static site
        run: npm run export

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: out/
          retention-days: 1

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test-and-build
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: out/

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to S3 and CloudFront
        run: npm run deploy:app
        env:
          AWS_CERTIFICATE_ARN: ${{ secrets.AWS_CERTIFICATE_ARN }}
          DEPLOYMENT_ENV: ${{ github.event.inputs.environment || 'production' }}

      - name: Create deployment annotation
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const deploymentUrl = environment === 'production' 
              ? 'https://vocaltechniquetranslator.com' 
              : 'https://staging.vocaltechniquetranslator.com';
            
            // Create deployment
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              auto_merge: false,
              required_contexts: [],
              description: `Deployed to ${environment}`
            });
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: deploymentUrl,
              description: 'Deployment completed successfully'
            });

  invalidate-cache:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Invalidation-${{ github.run_id }}

      - name: Get CloudFront Distribution ID
        id: get-distribution
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[0].DomainName=='vocaltechniquetranslator.com.s3.amazonaws.com'].Id" \
            --output text)
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Create CloudFront Invalidation
        if: steps.get-distribution.outputs.distribution-id != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-distribution.outputs.distribution-id }} \
            --paths "/*" \
            --caller-reference "deploy-${{ github.sha }}-${{ github.run_id }}"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, invalidate-cache]
    if: always()
    
    steps:
      - name: Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.deploy.result }}';
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const color = status === 'success' ? '28a745' : 'cb2431';
            
            // Comment on the commit
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `${emoji} Deployment to ${environment} ${status}!\n\nWorkflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });